#
# Copyright (c) 2022-2024 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: Build-OpenWrt_Multi-Platform(V2)

on:
  repository_dispatch:
    types: [openwrt_source_update]
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      is_display_detailed:
        description: 'Whether to display detailed information about compilation'
        required: false
        default: 'false'
      is_single_threaded:
        description: 'Whether single-threaded compilation'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 */8 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/lean.feeds.conf.default
  CONFIGS: config/leanlede_config
  DIY_P1_SH: diy_script/lean_diy/diy-part1.sh
  DIY_P2_SH: diy_script/lean_diy/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_ARTIFACT: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  job_init: 
    runs-on: ubuntu-latest
    name: Build-Init
    outputs:
      output_release_tag: ${{ steps.gen_release_tag.outputs.release_tag }}
      output_sha: ${{steps.commit.outputs.commit_hash }}
    steps:
      - name: Generate Tag Name
        id: gen_release_tag
        run: |
          echo "release_tag=multi-platform_$(date +"%Y.%m.%d_%H.%M.%S")" >> $GITHUB_OUTPUT
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          cd /workdir
          sudo mkdir -p output
          sudo chown $USER:$GROUPS /workdir/output
          ln -sf /workdir/output $GITHUB_WORKSPACE/output

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Clone Source Code
        working-directory: /workdir
        run: |
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Load Custom Feeds
        run: |
          [ -e $FEEDS_CONF ] && cp -r $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update Feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install Feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Make Defconfig Custom Configuration
        run: |
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          
          cd ..
          platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)
          for i in "${platforms[@]}"; do
            [ -e $CONFIGS/$i.config ] && cp -r $CONFIGS/$i.config openwrt/.config
            cd openwrt
            make defconfig
            cd ..
            cp -f openwrt/.config $CONFIGS/$i.config
          done
          cd openwrt
          rm -rf .config

      - name: Git Auto Update Config
        uses: stefanzweifel/git-auto-commit-action@v5.0.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: auto update config
          branch: main
          commit_author: smallprogram <smallprogram@foxmail.com>

      - name: Generate Release Tag
        id: tag
        run: |
          echo "## :mega:Update content" >> release.txt

          echo "![](https://img.shields.io/github/downloads/smallprogram/OpenWrtAction/${{ steps.gen_release_tag.outputs.release_tag }}/total?style=flat-square)" >> release.txt

          echo "### Firmware Information" >> release.txt

          echo "**:loudspeaker:Cancel the ext4 format and only keep the squashfs format.**" >> release.txt
          echo "**:computer:Including traditional IMG format firmware and UEFI boot firmware.**" >> release.txt
          echo "**:cd:Including qcow2 format firmware and UEFI boot firmware supporting pve virtual machine.**" >> release.txt
          echo "**:cd:Including vdi format firmware and UEFI boot firmware supporting Visual Box virtual machine.**" >> release.txt
          echo "**:cd:Including vhdx format firmware and UEFI boot firmware supporting Hyper-v virtual machines.**" >> release.txt
          echo "**:dvd:Including vmdk format firmware and UEFI boot firmware that support ESXi virtual machines (8.0 requires tool conversion).**" >> release.txt
          echo "" >> release.txt

          echo "### Openwrt Information" >> release.txt

          echo "**:minidisc: OpenWrt Version: $(grep -o "DISTRIB_REVISION='[^']*'" $GITHUB_WORKSPACE/openwrt/package/lean/default-settings/files/zzz-default-settings | sed "s/DISTRIB_REVISION='\([^']*\)'/\1/")**" >> release.txt
          
          PKG_VERSION=$(grep -oP 'PKG_VERSION:=\K[^ ]+' "$GITHUB_WORKSPACE/openwrt/package/lean/default-settings/Makefile")
          PKG_RELEASE=$(grep -oP 'PKG_RELEASE:=\K[^ ]+' "$GITHUB_WORKSPACE/openwrt/package/lean/default-settings/Makefile")
          echo "**:gear: Default-Setting Version: $PKG_VERSION.$PKG_RELEASE**" >> release.txt

          echo "### Compile Information" >> release.txt

          kernel_X86=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/x86/Makefile)
          kernel_rockchip=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/rockchip/Makefile)
          kernel_bcm27xx=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/bcm27xx/Makefile)

          echo "platform|kernel|compile status" >> release.txt
          echo "-|-|-" >> release.txt
          echo "**:ice_cube: X86**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_X86} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R5S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R5C**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R4S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R4SE**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R2S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R2C**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: H66K**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: H68K**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: H69K**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R66S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R68S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R_Pi_3b**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_bcm27xx} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
          echo "**:ice_cube: R_Pi_4b**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_bcm27xx} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt

          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Tags To Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release_tag_${{ steps.gen_release_tag.outputs.release_tag }}
          path: release.txt
          retention-days: 5

      - name: Generate Git Log
        if: steps.tag.outputs.status == 'success'
        id: git_log
        run: |
            cd $GITHUB_WORKSPACE
            git -C openwrt log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/packages log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/luci log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/routing log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/telephony log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/helloworld log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/passwall_packages log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/passwall log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/passwall2 log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/OpenClash log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/feeds/luci/themes/luci-theme-argon log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/package/lean/luci-app-argon-config log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/package/lean/luci-app-adguardhome log -n 1 --format="%H" >> git_log.txt
            git -C openwrt/package/custom_packages/mosdns log -n 1 --format="%H" >> git_log.txt
            echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Git Log To Artifact
        uses: actions/upload-artifact@v4
        if: steps.git_log.outputs.status == 'success'
        with:
          name: git_log_${{ steps.gen_release_tag.outputs.release_tag }}
          path: git_log.txt
          retention-days: 5

      - name: Generate Source Packages
        working-directory: /workdir
        id: generate_image
        run: |
          echo "source folder size:"
          du -hs openwrt/
          echo
          tar -czf output/output.tar.gz openwrt/

          echo "source code size:"
          cd output
          ls -lh output.tar.gz
          echo "SOURCE_PATH=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Source To Artifact
        uses: actions/upload-artifact@v4
        if: steps.generate_image.outputs.status == 'success'
        with:
          name: Source_${{ steps.gen_release_tag.outputs.release_tag }}
          path: ${{ env.SOURCE_PATH }}/output.tar.gz
          retention-days: 5

  job_build:
    needs: job_init
    runs-on: ubuntu-latest
    name: Build-OpenWrt-${{ matrix.platforms }}
    strategy:
      fail-fast: false
      matrix:
        platforms: [X86, R5S, R5C, R4S, R4SE, R2S, R2C, H66K, H68K, H69K, R66S, R68S, R_PI_3b, R_PI_4b]

    steps:
      - name: Initialization Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          df -hT
  
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 6144
          swap-size-mb: 10240
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          build-mount-path: '/workdir'

      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ needs.job_init.outputs.output_sha }}

      - name: Install Packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://github.com/smallprogram/OpenWrtAction/raw/main/diy_script/depends)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          df -hT

      - name: Initialization Directory
        working-directory: /workdir
        id: init_directory
        run: |
          sudo mkdir -p openwrt
          sudo mkdir -p download
          sudo chown $USER:$GROUPS /workdir/openwrt
          sudo chown $USER:$GROUPS /workdir/download

          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          ln -sf /workdir/download $GITHUB_WORKSPACE/download

      - name: Download Source From Artifacts
        id : download
        uses: actions/download-artifact@v4
        with:
          name: Source_${{ needs.job_init.outputs.output_release_tag }}
          path: download

      - name: Download Tags
        uses: actions/download-artifact@v4
        with:
          name: release_tag_${{ needs.job_init.outputs.output_release_tag }}
          path: download

      - name: File Extraction
        working-directory: /workdir
        run: |
          echo "source packages size:"
          ls -lh download/output.tar.gz
          tar -xzf download/output.tar.gz
          rm -rf download/output.tar.gz
          cd download
          echo "TAG_PATH=$PWD" >> $GITHUB_ENV
          cd ..
          sudo chown -R $USER:$GROUPS /workdir/openwrt

      - name: Load Configuration
        run: |
          [ -e $CONFIGS/${{ matrix.platforms }}.config ] && cp -r $CONFIGS/${{ matrix.platforms }}.config openwrt/.config
          cd openwrt
          make defconfig

      - name: Download Package
        id: package
        run: |
          df -hT
          cd $GITHUB_WORKSPACE/openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -hT
      
      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.16
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

      - name: Compile Tools
        id: compile_tools
        run: |
          cd openwrt
          is_complie_error=0

          if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile tools"
                make tools/compile -j1 V=s
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile tools"
                make tools/compile -j$(nproc) V=s
                is_complie_error=${PIPESTATUS[0]}
            fi
          else
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile tools"
                make tools/compile -j1
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile tools"
                make tools/compile -j$(nproc)
                is_complie_error=${PIPESTATUS[0]}
            fi
          fi

          echo "complie result： $is_complie_error"
          if [ "$is_complie_error" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit $is_complie_error
          fi

          df -hT

      - name: Compile Toolchain
        if: steps.compile_tools.outputs.status == 'success'
        id: compile_toolchain
        run: |
          cd openwrt
          is_complie_error=0
          if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile toolchain"
                make toolchain/compile -j1 V=s
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile toolchain"
                make toolchain/compile -j$(nproc) V=s
                is_complie_error=${PIPESTATUS[0]}
            fi
          else
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile toolchain"
                make toolchain/compile -j1
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile toolchain"
                make toolchain/compile -j$(nproc)
                is_complie_error=${PIPESTATUS[0]}
            fi
          fi

          echo "complie result： $is_complie_error"
          if [ "$is_complie_error" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit $is_complie_error
          fi

          df -hT

      - name: Generate Frimware
        if: steps.compile_toolchain.outputs.status == 'success'
        id: compile
        run: |
          cd openwrt
          is_complie_error=0
          if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile frimware"
                make -j1 V=s
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile frimware"
                make -j$(nproc) V=s
                is_complie_error=${PIPESTATUS[0]}
            fi
          else
            if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
                echo "1 threads compile frimware"
                make -j1
                is_complie_error=${PIPESTATUS[0]}
            else
                echo "$(nproc) threads compile frimware"
                make -j$(nproc)
                is_complie_error=${PIPESTATUS[0]}
            fi
          fi

          echo "complie result： $is_complie_error"
          if [ "$is_complie_error" -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit $is_complie_error
          fi

          df -hT

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Upload Bin Directory
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_${{ matrix.platforms }}_${{ needs.job_init.outputs.output_release_tag }}
          path: openwrt/bin

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
          mkdir -p feeds_packages
          firmware_path=$PWD
          cd $GITHUB_WORKSPACE/openwrt/bin/packages/*/
          mv * $firmware_path/feeds_packages
          cd $firmware_path
          zip -r buildinfo_${{ matrix.platforms }}.zip feeds_packages packages sha256sums version.buildinfo config.buildinfo feeds.buildinfo
          rm -rf packages feeds_packages sha256sums version.buildinfo config.buildinfo feeds.buildinfo

          echo "FIRMWARE=$firmware_path" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload Firmware Directory
        uses: actions/upload-artifact@v4
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_ARTIFACT == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware_${{ matrix.platforms }}_${{ needs.job_init.outputs.output_release_tag }}
          path: ${{ env.FIRMWARE }}

      - name: Upload Firmware To Release
        uses: softprops/action-gh-release@master
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.job_init.outputs.output_release_tag }}
          body_path: ${{ env.TAG_PATH }}/release.txt
          files: ${{ env.FIRMWARE }}/*

  build_status_flag:
    needs: job_build
    if: ${{ always() }}
    name: Build-Status-Flag
    runs-on: ubuntu-latest
    outputs:
      checking_build_status: ${{ steps.status_checking.outputs.status }}
    steps:
      - name: Build_status_checking
        id: status_checking
        run: |
          json_data=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          name_conclusion_array=($(echo "$json_data" | jq -r '.jobs[] | select(.name | startswith("Build-OpenWrt-")) | "\(.name).\(.conclusion)"'))

          platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)
          
          is_success_compiled=false
          for ((i = 0; i < ${#platforms[@]}; i++)); do
            if $is_success_compiled; then break; fi
            platform="${platforms[i]}"
            for item in "${name_conclusion_array[@]}"; do
              IFS='.' read -r name conclusion <<< "$item"
              if [[ "$name" == "Build-OpenWrt-$platform" ]]; then
                if [[ "$conclusion" == "success" ]]; then
                  is_success_compiled=true
                  break
                fi
              fi
            done
          done

          echo "-------------------build status--------------------------"
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"
            echo "Name: $name"
            echo "Conclusion: $conclusion"
          done
          echo "-----------------------------------------------------------"

          

          if $is_success_compiled; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "Compilation succeeded for at least one platform."
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "Compilation failed for all platforms."
          fi


  job_organize_git_log:
    needs: [job_init, job_build, build_status_flag]
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    runs-on: ubuntu-latest
    name: Organize-Git-Log
    outputs:
      output_sha: ${{steps.commit.outputs.commit_hash }}
       
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ needs.job_init.outputs.output_sha }}

    - name: Download Git Log
      uses: actions/download-artifact@v4
      with:
        name: git_log_${{ needs.job_init.outputs.output_release_tag }}

    - name: Generate Git Log
      run: |
        REPO_URLS=(
          "https://github.com/coolsnowwolf/lede --filter=blob:none"
          "https://github.com/coolsnowwolf/packages --filter=blob:none"
          "https://github.com/coolsnowwolf/luci --filter=blob:none"
          "https://git.openwrt.org/feed/routing.git"
          "https://git.openwrt.org/feed/telephony.git"
          "https://github.com/fw876/helloworld --filter=blob:none"
          "https://github.com/xiaorouji/openwrt-passwall-packages --filter=blob:none"
          "https://github.com/xiaorouji/openwrt-passwall --filter=blob:none"
          "https://github.com/xiaorouji/openwrt-passwall2 --filter=blob:none"
          "https://github.com/vernesong/OpenClash.git --filter=blob:none"
          "https://github.com/jerrykuku/luci-theme-argon.git --filter=blob:none -b 18.06"
          "https://github.com/jerrykuku/luci-app-argon-config.git --filter=blob:none -b 18.06"
          "https://github.com/rufengsuixing/luci-app-adguardhome.git --filter=blob:none"
          "https://github.com/sbwml/luci-app-mosdns --filter=blob:none -b v5"
        )
        LINE_NUMBERS=(1 2 3 4 5 6 7 8 9 10 11 12 13 14)
        OUTPUT_FILES=(
          "lede"
          "packages"
          "luci"
          "routing"
          "telephony"
          "helloworld"
          "openwrt-passwall-packages"
          "openwrt-passwall"
          "openwrt-passwall2"
          "OpenClash"
          "luci-theme-argon"
          "luci-app-argon-config"
          "luci-app-adguardhome"
          "luci-app-mosdns"
        )
        TITLE_MESSAGES=(
          "lean openwrt new commit log"
          "lean package new commit log"
          "lean luci new commit log"
          "openwrt routing new commit log"
          "openwrt telephony new commit log"
          "helloworld new commit log"
          "passwall packages new commit log"
          "passwall new commit log"
          "passwall2 new commit log"
          "openclash new commit log"
          "luci-theme-argon new commit log"
          "luci-app-argon-config new commit log"
          "luci-app-adguardhome new commit log"
          "luci-app-mosdns new commit log"
        )
        cd $GITHUB_WORKSPACE
        find git_log -type f ! -name 'log' -exec rm {} +
        mkdir -p git_repositories

        for i in "${!REPO_URLS[@]}"; do
          REPO_URL=${REPO_URLS[$i]}
          LINE_NUMBER=${LINE_NUMBERS[$i]}
          OUTPUT_FILE=${OUTPUT_FILES[$i]}
          TITLE_MESSAGE=${TITLE_MESSAGES[$i]}
          
          line=$(sed -n "${LINE_NUMBER}p" git_log/log)
          SHA_Begin=$(echo "$line" | sed -n 's/^[^:]*://p')
          SHA_End=$(sed -n "${LINE_NUMBER}p" git_log.txt)

          git clone $REPO_URL git_repositories/$OUTPUT_FILE

          if ! git -C git_repositories/$OUTPUT_FILE cat-file -t "$SHA_Begin" >/dev/null 2>&1 || \
            ! git -C git_repositories/$OUTPUT_FILE cat-file -t "$SHA_End" >/dev/null 2>&1; then
            sed -i "${LINE_NUMBER}s/:.*/:$SHA_End/" git_log/log

            echo " :x: Invalid SHA detected (Begin: $SHA_Begin, End: $SHA_End) for $OUTPUT_FILE"
            echo "<details> <summary> <b>$TITLE_MESSAGE :x: </b>  </summary>" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "<b> It is detected that $OUTPUT_FILE has an illegal SHA value. It is possible that $OUTPUT_FILE has git rebase behavior. The relevant git update log cannot be counted. Please wait for the next compilation time.</b>" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "</details>" >> "git_log/$OUTPUT_FILE.log"
            continue
          fi

          if [ -z "$SHA_Begin" ]; then
            sed -i "${LINE_NUMBER}s/:.*/:$SHA_End/" git_log/log
          elif [ "$SHA_Begin" != "$SHA_End" ]; then
            echo "<details> <summary> <b>$TITLE_MESSAGE :new: </b>  </summary>" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "SHA|Author|Date|Message" >> "git_log/$OUTPUT_FILE.log"
            echo "-|-|-|-" >> "git_log/$OUTPUT_FILE.log"
            git -C git_repositories/$OUTPUT_FILE log --pretty=format:"%h|%an|%ad|%s" "$SHA_Begin...$SHA_End" >> "git_log/$OUTPUT_FILE.log"
            echo "" >> "git_log/$OUTPUT_FILE.log"
            echo "</details>" >> "git_log/$OUTPUT_FILE.log"
            echo "|-----------------------------------|"
            echo "$OUTPUT_FILE has update log"
            echo "|-----------------------------------|"
            sed -i "${LINE_NUMBER}s/:.*/:$SHA_End/" git_log/log
          fi
        done

        echo "|=========================================|"
        ls git_log
        echo "|=========================================|"
        cd $GITHUB_WORKSPACE
        rm -rf git_log.txt git_repositories


    - name: Git auto update git log
      uses: stefanzweifel/git-auto-commit-action@v5.0.0
      id: commit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        commit_message: auto update git log
        branch: main
        commit_author: smallprogram <smallprogram@foxmail.com>


  job_organize_tags:
    needs: [job_init, job_build, build_status_flag, job_organize_git_log]
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    runs-on: ubuntu-latest
    name: Organize-Release-Tags
        
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ needs.job_organize_git_log.outputs.output_sha }}

    - name: Download Tags
      uses: actions/download-artifact@v4
      with:
        name: release_tag_${{ needs.job_init.outputs.output_release_tag }}

    - name: Organize Tags
      id: organize_tags
      # env:
      #   GH_TOKEN: ${{ github.token }}
      run: |
        
        if [ -f "release.txt" ]; then

          json_data=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          name_conclusion_array=($(echo "$json_data" | jq -r '.jobs[] | select(.name | startswith("Build-OpenWrt-")) | "\(.name).\(.conclusion)"'))

          platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)

          echo "-------------------build status--------------------------"
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"
            echo "Name: $name"
            echo "Conclusion: $conclusion"
          done
          echo "-----------------------------------------------------------"
          
          for ((i = 0; i < ${#platforms[@]}; i++)); do
            platform="${platforms[i]}"
            is_error=false
            row=$((i+17))s
            for item in "${name_conclusion_array[@]}"; do
              IFS='.' read -r name conclusion <<< "$item"          
              if [[ "$name" == "Build-OpenWrt-$platform" ]]; then
                if [[ "$conclusion" == "success" ]]; then
                  break
                else
                  is_error=true
                  break
                fi
              fi
            done
            
            if $is_error; then
              echo "is_error be true: $is_error"
              sed -i "$row/build-in_progress_or_waiting.....-yellow?logo=githubactions\&logoColor=yellow/build-failure-red?logo=githubactions\&logoColor=red/" release.txt;
            else
              echo "is_error be false: $is_error"
              sed -i "$row/build-in_progress_or_waiting.....-yellow?logo=githubactions\&logoColor=yellow/build-passing-green?logo=githubactions\&logoColor=green/" release.txt;
            fi
          done

          echo "|=========================================|"
          ls git_log
          echo "|=========================================|"

          echo "## What's Changed" >> release.txt

          OUTPUT_FILES=(
            "lede"
            "packages"
            "luci"
            "routing"
            "telephony"
            "helloworld"
            "openwrt-passwall-packages"
            "openwrt-passwall"
            "openwrt-passwall2"
            "OpenClash"
            "luci-theme-argon"
            "luci-app-argon-config"
            "luci-app-adguardhome"
            "luci-app-mosdns"
          )

          for file in "${OUTPUT_FILES[@]}"; do
            if [ -f "git_log/$file.log" ]; then
              echo "found file $file.log!"
              cat "git_log/$file.log" >> release.txt
            else
              echo "no file $file.log 404"
            fi
          done
          

          echo "status=success" >> $GITHUB_OUTPUT
          echo "-----------------------release.txt------------------------"
          cat release.txt

        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Upload Release Tag
      uses: softprops/action-gh-release@master
      if: steps.organize_tags.outputs.status == 'success'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.job_init.outputs.output_release_tag }}
        body_path: release.txt

  job_my_action:
    needs: [job_init, job_build, build_status_flag, job_organize_git_log, job_organize_tags]
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    runs-on: ubuntu-latest
    name: My-Action

    steps:
      - name: Trigger build
        uses: peter-evans/repository-dispatch@main
        with:
          token: ${{ secrets.MY_SECRET_PAT }}
          repository: smallprogram/MyAction
          event-type: openwrt_compilation_completed