#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      is_display_detailed:
        description: 'Whether to display detailed information about compilation'
        required: false
        default: 'false'
      is_single_threaded:
        description: 'Whether single-threaded compilation'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 */8 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/custom.feeds.conf.default
  DIY_P1_SH: diy_script/diy-part1.sh
  DIY_P2_SH: diy_script/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_ARTIFACT: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  job_init: 
    runs-on: ubuntu-latest
    name: Build-Openwrt-Init
    outputs:
      output_release_tag: ${{ steps.gen_release_tag.outputs.release_tag }}
    steps:
      - id: gen_release_tag
        run: |
          echo "release_tag=multi-platform_$(date +"%Y.%m.%d_%H.%M.%S")" >> $GITHUB_OUTPUT
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      # - name: Clone source code
      #   working-directory: /workdir
      #   run: |
      #     git clone $REPO_URL -b $REPO_BRANCH openwrt
      #     ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      # - name: Load custom feeds
      #   run: |
      #     [ -e $FEEDS_CONF ] && cp -r $FEEDS_CONF openwrt/feeds.conf.default
      #     chmod +x $DIY_P1_SH
      #     cd openwrt
      #     $GITHUB_WORKSPACE/$DIY_P1_SH

      # - name: Update feeds
      #   run: cd openwrt && ./scripts/feeds update -a

      # - name: Install feeds
      #   run: cd openwrt && ./scripts/feeds install -a

      # - name: Make defconfig custom configuration
      #   run: |
      #     chmod +x $DIY_P2_SH
      #     cd openwrt
      #     $GITHUB_WORKSPACE/$DIY_P2_SH
          
      #     cd ..
      #     platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)
      #     for i in "${platforms[@]}"; do
      #       [ -e config/$i.config ] && cp -r config/$i.config openwrt/.config
      #       cd openwrt
      #       make defconfig
      #       cd ..
      #       cp -f openwrt/.config config/$i.config
      #     done

      - name: Generate Git Log
        run: |
          REPO_URLS=(
            "https://github.com/coolsnowwolf/lede"
            "https://github.com/coolsnowwolf/packages"
            "https://github.com/coolsnowwolf/luci"
            "https://git.openwrt.org/feed/routing.git"
            "https://git.openwrt.org/feed/telephony.git"
            "https://github.com/fw876/helloworld"
            "https://github.com/xiaorouji/openwrt-passwall-packages"
            "https://github.com/xiaorouji/openwrt-passwall"
            "https://github.com/xiaorouji/openwrt-passwall2"
            "https://github.com/jerrykuku/luci-theme-argon.git -b 18.06"
            "https://github.com/jerrykuku/luci-app-argon-config.git -b 18.06"
            "https://github.com/rufengsuixing/luci-app-adguardhome.git"
            "https://github.com/sbwml/luci-app-mosdns -b v5"
          )
          LINE_NUMBERS=(1 2 3 4 5 6 7 8 9 10 11 12 13)
          OUTPUT_FILES=(
            "lede"
            "packages"
            "luci"
            "routing"
            "telephony"
            "helloworld"
            "openwrt-passwall-packages"
            "openwrt-passwall"
            "openwrt-passwall2"
            "luci-theme-argon"
            "luci-app-argon-config"
            "luci-app-adguardhome"
            "luci-app-mosdns"
          )
          TITLE_MESSAGES=(
            "Lean Openwrt New Git Log :new: "
            "Lean Package New Git Log :new: "
            "Lean Luci New Git Log :new: "
            "Openwrt routing New Git Log :new: "
            "Openwrt telephony New Git Log :new: "
            "HelloWorld New Git Log :new: "
            "Passwall Packages New Git Log :new: "
            "Passwall New Git Log :new: "
            "Passwall2 New Git Log :new: "
            "luci-theme-argon New Git Log :new: "
            "luci-app-argon-config New Git Log :new: "
            "luci-app-adguardhome New Git Log :new: "
            "luci-app-mosdns New Git Log :new: "
          )
          cd $GITHUB_WORKSPACE
          find git_log -type f ! -name 'log.txt' -exec rm {} +

          for i in "${!REPO_URLS[@]}"; do
            REPO_URL=${REPO_URLS[$i]}
            LINE_NUMBER=${LINE_NUMBERS[$i]}
            OUTPUT_FILE=${OUTPUT_FILES[$i]}
            TITLE_MESSAGE=${TITLE_MESSAGES[$i]}

            git clone $REPO_URL $OUTPUT_FILE
            cd $OUTPUT_FILE || exit
            SHA=$(git rev-parse --short HEAD)
            cd ..

            sed -i "${LINE_NUMBER}s/\*.*/*$SHA/" git_log/log.txt
            line=$(sed -n "${LINE_NUMBER}p" git_log/log.txt)
            SHA_Begin=$(echo "$line" | sed -n 's/.*:\(.*\)\*.*/\1/p')
            SHA_End=$(echo "$line" | sed -n 's/.*\*\(.*\)/\1/p')

            if [ -z "$SHA_Begin" ]; then
              sed -i "${LINE_NUMBER}s/\(:\).*\(\*\)/\1$SHA_End\2/" git_log/log.txt
            elif [ "$SHA_Begin" != "$SHA_End" ]; then
              echo "</details> <details> <summary> $TITLE_MESSAGE  </summary>" >> "git_log/$OUTPUT_FILE"
              echo "SHA|Author|Date|Message" >> "git_log/$OUTPUT_FILE"
              echo "-|-|-|-" >> "git_log/$OUTPUT_FILE"
              git -C $OUTPUT_FILE log --pretty=format:"%h|%an|%ad|%s" "$SHA_Begin...$SHA_End" >> "git_log/$OUTPUT_FILE"
              echo "</details>" >> "git_log/$OUTPUT_FILE"
              sed -i "${LINE_NUMBER}s/\(:\).*\(\*\)/\1$SHA_End\2/" git_log/log.txt
            fi

            cd $GITHUB_WORKSPACE || exit
            rm -rf $OUTPUT_FILE
          done

      - name: Git auto update config
        uses: stefanzweifel/git-auto-commit-action@v5.0.0
        id: commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit_message: auto update config and git log
          branch: main
          commit_author: smallprogram <smallprogram@foxmail.com>

  job_build_toolchain:
    needs: job_init
    runs-on: ubuntu-latest
    name: Build-ToolChain-${{ matrix.platforms }}
    strategy:
      fail-fast: false
      matrix:
        platforms: [X86, R5S, R5C, R4S, R4SE, R2S, R2C, H66K, H68K, H69K, R66S, R68S, R_PI_3b, R_PI_4b]

    steps:
      - name: Initialization Environment
        run: |
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          df -hT
  
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 6144
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          build-mount-path: '/workdir'

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Install Packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          # sudo -E apt-get -qq update
          # sudo -E apt-get -qq install $(curl -fsSL https://github.com/smallprogram/OpenWrtAction/raw/main/diy_script/depends)
          # sudo -E apt-get -qq autoremove --purge
          # sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          df -hT

      - name: Clone Source Code
        working-directory: /workdir
        run: |
          df -hT
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          df -hT

      - name: Initialization Directory
        working-directory: /workdir
        id: init_directory
        run: |
          sudo mkdir -p output
          sudo mkdir -p toolchain
          sudo chown $USER:$GROUPS /workdir/output
          sudo chown $USER:$GROUPS /workdir/toolchain
          ln -sf /workdir/output $GITHUB_WORKSPACE/output
          ln -sf /workdir/toolchain $GITHUB_WORKSPACE/toolchain

          cd openwrt
          mkdir -p compile_log
          cd compile_log
          echo "LOGFILES=$PWD" >> $GITHUB_ENV

      # - name: Load Custom Feeds
      #   run: |
      #     [ -e $FEEDS_CONF ] && cp -r $FEEDS_CONF openwrt/feeds.conf.default
      #     chmod +x $DIY_P1_SH
      #     cd openwrt
      #     ./scripts/feeds clean
      #     $GITHUB_WORKSPACE/$DIY_P1_SH

      # - name: Update Feeds
      #   run: cd openwrt && ./scripts/feeds update -a


      # - name: Install Feeds
      #   run: cd openwrt && ./scripts/feeds install -a

      # - name: Load Configuration
      #   run: |
      #     [ -e config/${{ matrix.platforms }}.config ] && cp -r config/${{ matrix.platforms }}.config openwrt/.config
      #     chmod +x $DIY_P2_SH
      #     cd openwrt
      #     $GITHUB_WORKSPACE/$DIY_P2_SH
      #     # echo -e "\nCONFIG_ALL=y" >> .config
      #     # echo -e "\nCONFIG_ALL_NONSHARED=y" >> .config
      #     make defconfig
      #     # echo "config file info......................................"
      #     # cat .config

      # - name: Execute commands for X86 platform
      #   if: matrix.platforms == 'X86'
      #   run: |
      #     cd openwrt
      #     sed -i '/CONFIG_DEFAULT_kmod-usb-audio=y/s/=y/=n/' .config
      #     sed -i '/CONFIG_PACKAGE_kmod-media-core=y/s/=y/=n/' .config

      # - name: Download Package
      #   id: package
      #   run: |
      #     df -hT
      #     cd $GITHUB_WORKSPACE/openwrt
      #     # echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config
      #     make download -j8
      #     find dl -size -1024c -exec ls -l {} \;
      #     find dl -size -1024c -exec rm -f {} \;
      #     df -hT
      
      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.16
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

      # - name: Compile Tools
      #   id: compile_tools
      #   run: |
      #     cd openwrt
      #     rm -rf compile_log/*
      #     touch compile_log/log_error_${{ matrix.platforms }}_compile_tools.log
      #     is_complie_error=0

      #     if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
      #       if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
      #           echo "1 threads compile tools"
      #           make tools/compile -j1 V=s | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_tools.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       else
      #           echo "$(nproc) threads compile tools"
      #           make tools/compile -j$(nproc) V=s | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_tools.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       fi
      #     else
      #       if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
      #           echo "1 threads compile tools"
      #           make tools/compile -j1 | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_tools.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       else
      #           echo "$(nproc) threads compile tools"
      #           make tools/compile -j$(nproc) | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_tools.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       fi
      #     fi

      #     echo "complie result： $is_complie_error"
      #     if [ "$is_complie_error" -eq 0 ]; then
      #       echo "status=success" >> $GITHUB_OUTPUT
      #     else
      #       echo "status=failure" >> $GITHUB_OUTPUT
      #       exit $is_complie_error
      #     fi

      #     df -hT

      # - name: Upload Error Log To Artifact
      #   uses: actions/upload-artifact@v3
      #   if:  ${{ failure() }}
      #   with:
      #     name: log_error_${{ matrix.platforms }}_compile_tools_${{ needs.job_init.outputs.output_release_tag }}
      #     path: ${{ env.LOGFILES }}/*
      #     retention-days: 5

      # - name: Compile Toolchain
      #   if: steps.compile_tools.outputs.status == 'success'
      #   id: compile_toolchain
      #   run: |
      #     cd openwrt
      #     rm -rf compile_log/*
      #     touch compile_log/log_error_${{ matrix.platforms }}_compile_toolchain.log
      #     is_complie_error=0
      #     if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
      #       if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
      #           echo "1 threads compile toolchain"
      #           make toolchain/compile -j1 V=s | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_toolchain.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       else
      #           echo "$(nproc) threads compile toolchain"
      #           make toolchain/compile -j$(nproc) V=s | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_toolchain.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       fi
      #     else
      #       if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
      #           echo "1 threads compile toolchain"
      #           make toolchain/compile -j1 | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_toolchain.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       else
      #           echo "$(nproc) threads compile toolchain"
      #           make toolchain/compile -j$(nproc) | tee -a compile_log/log_error_${{ matrix.platforms }}_compile_toolchain.log
      #           is_complie_error=${PIPESTATUS[0]}
      #       fi
      #     fi

      #     echo "complie result： $is_complie_error"
      #     if [ "$is_complie_error" -eq 0 ]; then
      #       echo "status=success" >> $GITHUB_OUTPUT
      #     else
      #       echo "status=failure" >> $GITHUB_OUTPUT
      #       exit $is_complie_error
      #     fi
          
      #     # rm -rf .config* dl bin
      #     df -hT

      # - name: Upload Error Log To Artifact
      #   uses: actions/upload-artifact@v3
      #   if: ${{ failure() }}
      #   with:
      #     name: log_error_${{ matrix.platforms }}_compile_toolchain_${{ needs.job_init.outputs.output_release_tag }}
      #     path: ${{ env.LOGFILES }}/*
      #     retention-days: 5

      # - name: Generate Toolchain Packages
      #   if: steps.compile_toolchain.outputs.status == 'success'
      #   working-directory: /workdir
      #   id: generate_image
      #   run: |
      #     rm -rf openwrt/compile_log/*
      #     echo "before generate toolchain packages directory size:"
      #     du -hs openwrt/
      #     echo
      #     tar -czf output/output.tar.gz openwrt/

      #     echo "toolchain packages size:"
      #     cd output
      #     ls -lh output.tar.gz
      #     echo "TOOLCHAIN=$PWD" >> $GITHUB_ENV
      #     echo "status=success" >> $GITHUB_OUTPUT

      # - name: Upload Toolchain To Artifact
      #   uses: actions/upload-artifact@v3
      #   if: steps.generate_image.outputs.status == 'success'
      #   with:
      #     name: TOOLCHAIN_IMAGE_${{ matrix.platforms }}_${{ needs.job_init.outputs.output_release_tag }}
      #     path: ${{ env.TOOLCHAIN }}/output.tar.gz
      #     retention-days: 5

  job_build:
    needs: [job_init, job_build_toolchain]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Build-OpenWrt-${{ matrix.platforms }}
    strategy:
      fail-fast: false
      matrix:
        platforms: [X86, R5S, R5C, R4S, R4SE, R2S, R2C, H66K, H68K, H69K, R66S, R68S, R_PI_3b, R_PI_4b]



    steps:
    - name: Initialization Environment
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -hT

    - name: Maximize Build Space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 6144
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'
        build-mount-path: '/workdir'

    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Install Packages
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "install packages!!!!!!"
        # sudo -E apt-get -qq update
        # sudo -E apt-get -qq install $(curl -fsSL https://github.com/smallprogram/OpenWrtAction/raw/main/diy_script/depends)
        # sudo -E apt-get -qq autoremove --purge
        # sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        df -hT

    - name: Initialization Directory
      working-directory: /workdir
      run: |
        sudo mkdir -p openwrt
        sudo mkdir -p download
        sudo chown $USER:$GROUPS /workdir/openwrt
        sudo chown $USER:$GROUPS /workdir/download

        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        ln -sf /workdir/download $GITHUB_WORKSPACE/download

    # - name: Download Toolchain From Artifacts
    #   id : download
    #   uses: actions/download-artifact@v3
    #   with:
    #     name: TOOLCHAIN_IMAGE_${{ matrix.platforms }}_${{ needs.job_init.outputs.output_release_tag }}
    #     path: download

    # - name: File Extraction
    #   working-directory: /workdir
    #   run: |
    #     echo "toolchain packages size:"
    #     ls -lh download/output.tar.gz
    #     tar -xzf download/output.tar.gz
    #     rm -rf download/*
    #     sudo chown -R $USER:$GROUPS /workdir/openwrt
    #     # echo
    #     # echo "directory size:"
    #     # du -hs /workdir/openwrt/
    #     cd openwrt
    #     mkdir -p compile_log
    #     cd compile_log
    #     echo "LOGFILES=$PWD" >> $GITHUB_ENV


    - name: SSH connection to Actions
      uses: mxschmitt/action-tmate@v3.16
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')


    - name: Generate Frimware
      id: compile
      run: |
        # cd openwrt
        # rm -rf compile_log/*
        # touch compile_log/log_error_${{ matrix.platforms }}_generate_frimware.log
        # is_complie_error=0
        # if [[ "${{ github.event.inputs.is_display_detailed }}" == "true" ]]; then
        #   if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
        #       echo "1 threads compile frimware"
        #       make -j1 V=s | tee -a compile_log/log_error_${{ matrix.platforms }}_generate_frimware.log
        #       is_complie_error=${PIPESTATUS[0]}
        #   else
        #       echo "$(nproc) threads compile frimware"
        #       make -j$(nproc) V=s | tee -a compile_log/log_error_${{ matrix.platforms }}_generate_frimware.log
        #       is_complie_error=${PIPESTATUS[0]}
        #   fi
        # else
        #   if [[ "${{ github.event.inputs.is_single_threaded }}" == "true" ]]; then
        #       echo "1 threads compile frimware"
        #       make -j1 | tee -a compile_log/log_error_${{ matrix.platforms }}_generate_frimware.log
        #       is_complie_error=${PIPESTATUS[0]}
        #   else
        #       echo "$(nproc) threads compile frimware"
        #       make -j$(nproc) | tee -a compile_log/log_error_${{ matrix.platforms }}_generate_frimware.log
        #       is_complie_error=${PIPESTATUS[0]}
        #   fi
        # fi

        # echo "complie result： $is_complie_error"
        # if [ "$is_complie_error" -eq 0 ]; then
        #   echo "status=success" >> $GITHUB_OUTPUT
        # else
        #   echo "status=failure" >> $GITHUB_OUTPUT
        #   exit $is_complie_error
        # fi

        # echo
        # echo "directory size:"
        # du -hs $GITHUB_WORKSPACE/openwrt/

        echo "status=success" >> $GITHUB_OUTPUT
        df -hT

    # - name: Upload Error Log To Artifact
    #   uses: actions/upload-artifact@v3
    #   if: ${{ failure() }}
    #   with:
    #     name: log_error_${{ matrix.platforms }}_generate_frimware_${{ needs.job_init.outputs.output_release_tag }}
    #     path: ${{ env.LOGFILES }}/*
    #     retention-days: 5


    # - name: Remove Unuselesss Files
    #   id: removeunuselessfiles
    #   if: steps.compile.outputs.status == 'success'
    #   run: |
    #     df -hT
    #     rm -rf  $GITHUB_WORKSPACE/openwrt/build_dir
    #     rm -rf  $GITHUB_WORKSPACE/openwrt/dl
    #     rm -rf  $GITHUB_WORKSPACE/openwrt/staging_dir
    #     rm -rf  $GITHUB_WORKSPACE/openwrt/toolchain
    #     rm -rf  $GITHUB_WORKSPACE/openwrt/tools

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    # - name: Upload Bin Directory
    #   uses: actions/upload-artifact@main
    #   if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
    #   with:
    #     name: OpenWrt_bin_${{ matrix.platforms }}_${{ needs.job_init.outputs.output_release_tag }}
    #     path: openwrt/bin

    - name: Organize Files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        # firmware_path=$PWD

        # cd $GITHUB_WORKSPACE/openwrt/bin/packages/*/
        # zip -r $firmware_path/ipk_${{ matrix.platforms }}.zip helloworld OpenClash passwall passwall_packages passwall2

        # cd $firmware_path
        # rm -rf packages
        # mv sha256sums sha256sums_${{ matrix.platforms }}
        # mv version.buildinfo version_${{ matrix.platforms }}.buildinfo
        # mv config.buildinfo config_${{ matrix.platforms }}.buildinfo
        # mv feeds.buildinfo feeds_${{ matrix.platforms }}.buildinfo

        # echo "FIRMWARE=$firmware_path" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # - name: Upload Firmware Directory
    #   uses: actions/upload-artifact@main
    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_ARTIFACT == 'true' && !cancelled()
    #   with:
    #     name: OpenWrt_firmware_${{ matrix.platforms }}_${{ needs.job_init.outputs.output_release_tag }}
    #     path: ${{ env.FIRMWARE }}

    - name: Generate Release Tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |

        echo "## :mega:Update content" >> release.txt

        echo "![](https://img.shields.io/github/downloads/smallprogram/OpenWrtAction/${{needs.job_init.outputs.output_release_tag}}/total?style=flat-square)" >> release.txt

        echo "### Firmware Information" >> release.txt

        echo "**:loudspeaker:Cancel the ext4 format and only keep the squashfs format.**" >> release.txt
        echo "**:computer:Including traditional IMG format firmware and UEFI boot firmware.**" >> release.txt
        echo "**:cd:Including qcow2 format firmware and UEFI boot firmware supporting pve virtual machine.**" >> release.txt
        echo "**:cd:Including vdi format firmware and UEFI boot firmware supporting Visual Box virtual machine.**" >> release.txt
        echo "**:cd:Including vhdx format firmware and UEFI boot firmware supporting Hyper-v virtual machines.**" >> release.txt
        echo "**:dvd:Including vmdk format firmware and UEFI boot firmware that support ESXi virtual machines (8.0 requires tool conversion).**" >> release.txt
        echo "" >> release.txt

        # echo "### Openwrt Information" >> release.txt

        # echo "**:minidisc: OpenWrt Version: $(grep -o "DISTRIB_REVISION='[^']*'" $GITHUB_WORKSPACE/openwrt/package/lean/default-settings/files/zzz-default-settings | sed "s/DISTRIB_REVISION='\([^']*\)'/\1/")**" >> release.txt
        
        # PKG_VERSION=$(grep -oP 'PKG_VERSION:=\K[^ ]+' "$GITHUB_WORKSPACE/openwrt/package/lean/default-settings/Makefile")
        # PKG_RELEASE=$(grep -oP 'PKG_RELEASE:=\K[^ ]+' "$GITHUB_WORKSPACE/openwrt/package/lean/default-settings/Makefile")
        # echo "**:gear: Default-Setting Version: $PKG_VERSION.$PKG_RELEASE**" >> release.txt

        # echo "### Compile Information" >> release.txt

        # kernel_X86=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/x86/Makefile)
        # kernel_rockchip=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/rockchip/Makefile)
        # kernel_bcm27xx=$(grep -oP 'KERNEL_PATCHVER:=\K[^ ]+' $GITHUB_WORKSPACE/openwrt/target/linux/bcm27xx/Makefile)

        # echo "platform|kernel|compile status" >> release.txt
        # echo "-|-|-" >> release.txt
        # echo "**:ice_cube: X86**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_X86} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R5S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R5C**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R4S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R4SE**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R2S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R2C**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: H66K**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: H68K**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: H69K**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R66S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R68S**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_rockchip} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R_Pi_3b**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_bcm27xx} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt
        # echo "**:ice_cube: R_Pi_4b**|**$(sed -n '2p' $GITHUB_WORKSPACE/openwrt/include/kernel-${kernel_bcm27xx} | awk -F '-' '{print $2}' | awk -F ' =' '{print $1}')**|![](https://img.shields.io/badge/build-in_progress_or_waiting.....-yellow?logo=githubactions&logoColor=yellow&style=flat-square)" >> release.txt

        echo "## File Description" >> release.txt
        echo "File Name|Meaning" >> release.txt
        echo "-|-" >> release.txt
        echo "**config_*.buildinfo**|compile configuration information" >> release.txt
        echo "**feeds_*.buildinfo**|feeds file content and git head information during compilation" >> release.txt
        echo "**ipk_*.zip**|Including the ipk installation files of helloworld OpenClash passwall passwall_packages passwall2" >> release.txt
        echo "**openwrt-*.img.gz**|openwrt firmware file" >> release.txt
        echo "**sha256sums_***|hash verification code file corresponding to the firmware" >> release.txt
        echo "**version_*.buildinfo**|the version file corresponding to the firmware" >> release.txt

        echo "## IPK File Description" >> release.txt
        echo "**Note that sometimes the dependent ipk of passwall and helloworld will be repeated. You may see that there are many ipk in helloworld, but there are few files of passwall_packages. Don’t be surprised, install them all**" >> release.txt
        echo "This ipk package is suitable for friends who do not want to upgrade the firmware but want to upgrade the scientific Internet plug-in." >> release.txt
        echo "You may see that each package contains four files: Packages, Packages.gz, Packages.manifest, and Packages.sig. Their meanings are as follows:" >> release.txt
        echo "1. Packages: This is a clear text file that contains information about all packages in the software source, such as package name, version, description, dependencies, etc. When configuring the opkg package manager to use a new software repository, opkg will download and read this file to know what packages are available in the repository." >> release.txt

        echo "2. Packages.gz: This is a compressed version of the Packages file. Since Packages files can be large, compressing them can save download time and bandwidth. opkg can also handle files in this compressed format." >> release.txt

        echo "3. Packages.manifest: This file is usually used for development and debugging purposes. It records the file structure and contents of each package in the software source in detail. This is useful for developers as it provides the exact contents of the package." >> release.txt

        echo "4. Packages.sig: This is a signature file used to verify the integrity and origin of Packages files. When opkg downloads a Packages or Packages.gz file, it can use this signature file to confirm that the package list has not been tampered with in transit and that it was indeed published by a trusted source." >> release.txt

        echo "## What's Changed" >> release.txt

        OUTPUT_FILES=(
          "lede"
          "packages"
          "luci"
          "routing"
          "telephony"
          "helloworld"
          "openwrt-passwall-packages"
          "openwrt-passwall"
          "openwrt-passwall2"
          "luci-theme-argon"
          "luci-app-argon-config"
          "luci-app-adguardhome"
          "luci-app-mosdns"
        )

        for file in "${OUTPUT_FILES[@]}"; do
          if [ -f "git_log/$file" ]; then
            cat "git_log/$file" >> release.txt
          fi
        done

        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    # - name: Upload Tags To Artifact
    #   uses: actions/upload-artifact@v3
    #   if: steps.tag.outputs.status == 'success'
    #   with:
    #     name: release_tag_${{ needs.job_init.outputs.output_release_tag }}
    #     path: release.txt
    #     retention-days: 5

    # - name: Upload Firmware To Release
    #   uses: softprops/action-gh-release@v0.1.15
    #   if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ needs.job_init.outputs.output_release_tag }}
    #     body_path: release.txt
    #     files: ${{ env.FIRMWARE }}/*

  