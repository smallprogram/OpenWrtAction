#
# Copyright (c) 2022-2024 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: test

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      is_display_detailed:
        description: 'Whether to display detailed information about compilation'
        required: false
        default: 'false'
      is_single_threaded:
        description: 'Whether single-threaded compilation'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 */8 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/lean.feeds.conf.default
  CONFIGS: config/leanlede_config
  DIY_P1_SH: diy_script/lean_diy/diy-part1.sh
  DIY_P2_SH: diy_script/lean_diy/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_ARTIFACT: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  job_build:
    runs-on: ubuntu-latest
    name: Build-OpenWrt-${{ matrix.platforms }}
    strategy:
      fail-fast: false
      matrix:
        platforms: [X86, R5S, R5C, R4S, R4SE, R2S, R2C, H66K, H68K, H69K, R66S, R68S, R_PI_3b, R_PI_4b]
    steps:
      - name: Initialization Environment
        id: compile
        run: |
            exit 1
            # if [[ "${{ matrix.platforms }}" == "X86" ]]; then
            #   exit 1   --如果修改为0，保证matrix都执行成功，那么job_test和job_organize_git_log才会执行
            # else
            #   exit 0
            # fi


  build_status_flag:
    needs: job_build
    if: ${{ always() }}
    name: Build-Status-Flag
    runs-on: ubuntu-latest
    outputs:
      checking_build_status: ${{ steps.status_checking.outputs.status }}
    steps:
      - name: Build_status_checking
        id: status_checking
        run: |
          json_data=$(curl -s -H "Authorization: Bearer ${{ github.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs")
          name_conclusion_array=($(echo "$json_data" | jq -r '.jobs[] | select(.name | startswith("Build-OpenWrt-")) | "\(.name).\(.conclusion)"'))

          platforms=(X86 R5S R5C R4S R4SE R2S R2C H66K H68K H69K R66S R68S R_PI_3b R_PI_4b)
          
          is_success_compiled=false
          for ((i = 0; i < ${#platforms[@]}; i++)); do
            if $is_success_compiled; then break; fi
            platform="${platforms[i]}"
            for item in "${name_conclusion_array[@]}"; do
              IFS='.' read -r name conclusion <<< "$item"
              if [[ "$name" == "Build-OpenWrt-$platform" ]]; then
                if [[ "$conclusion" == "success" ]]; then
                  is_success_compiled=true
                  break
                fi
              fi
            done
          done

          echo "-------------------build status--------------------------"
          for item in "${name_conclusion_array[@]}"; do
            IFS='.' read -r name conclusion <<< "$item"
            echo "Name: $name"
            echo "Conclusion: $conclusion"
          done
          echo "-----------------------------------------------------------"

            

            if $is_success_compiled; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "Compilation succeeded for at least one platform."
            else
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "Compilation failed for all platforms."
            fi

      - name: Build_status_checking
        id: test
        run: |
          echo "${{steps.status_checking.outputs.status}}"

  job_test:
    needs: [build_status_flag]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    name: dddd
        
    steps:
    - name: ddd
      run: |
        echo "${{ needs.build_status_flag.outputs.checking_build_status}}"

  job_organize_git_log:
    needs: [job_build, build_status_flag]
    if: ${{ always() && needs.build_status_flag.outputs.checking_build_status == 'success' }}
    runs-on: ubuntu-latest
    name: Organize-Git-Log
       
    steps:
    - name: Generate Git Log
      run: |
        echo "success"
